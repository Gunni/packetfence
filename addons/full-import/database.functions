#!/bin/bash

function test_db_connection_no_creds() {
  mysql -e 'select 1' > /dev/null
}

function get_db_name() {
  pf_conf="$1"
  db_name=`perl -MConfig::IniFiles -I/usr/local/pf/lib_perl/lib/perl5/ -e "print Config::IniFiles->new( -file => '$pf_conf')->val("database", "db")"`
  if [ -z "$db_name" ]; then
    db_name=pf
  fi
  
  echo $db_name
}

function import_mysqldump() {
  grants_file="$1"
  dump_file="$2"
  pf_conf="$3"

  if ! [ -f "$pf_conf" ]; then
    echo "The path to pf.conf is invalid"
    exit 1
  fi

  mariadb_args=""
  # we need a grant dump generated via: mysql ${MYSQL_CONN} --skip-column-names -A -e"SELECT CONCAT('SHOW GRANTS FOR ''',user,'''@''',host,''';') FROM mysql.user WHERE user<>''" | mysql ${MYSQL_CONN} --skip-column-names -A | sed 's/$/;/g' > grants.sql
  if ! test_db_connection_no_creds; then
    echo -n "Please enter the root password for MariaDB:"
    read -s mariadb_root_pass
    echo
    mariadb_args="$mariadb_args -p$mariadb_root_pass"
  fi

  db_name=`get_db_name $pf_conf`

  sub_splitter
  echo "Recreating database $db_name"
  mysql ${mariadb_args} -e "drop database if exists $db_name; create database $db_name"

  sub_splitter
  # We reimport the schema so that we have the functions and triggers
  # Detect minor version of the restored data
  restoring_version=`egrep -o '[0-9]+\.[0-9]+\.[0-9]+$' usr/local/pf/conf/pf-release | egrep -o '^[0-9]+\.[0-9]+'`
  echo "Importing bare schema for $restoring_version"
  mysql ${mariadb_args} $db_name < /usr/local/pf/db/pf-schema-$restoring_version.sql
  check_code $?

  sub_splitter
  echo "Replacing create statements from the dump and removing drop statements"
  # This is done so that tables aren't dropped 
  sed -i "s/DROP TABLE IF EXISTS /DELETE FROM /g" $dump_file
  sed -i "s/CREATE TABLE /CREATE TABLE IF NOT EXISTS /g" $dump_file

  sub_splitter
  echo "Importing $dump_file into $db_name"
  mysql ${mariadb_args} $db_name < $dump_file
	check_code $?
  
  sub_splitter
  echo "Importing grants"
  mysql ${mariadb_args} < $grants_file
	check_code $?

}

function import_mariabackup() {
  if ! which qpress > /dev/null 2>&1; then
    echo "Missing qpress command. Please read the documentation of this script in the Installation guide to prepare your environment before running this script"
    exit 1
  fi

  if ! which mariabackup > /dev/null 2>&1; then
    echo "Missing qpress command. Please read the documentation of this script in the Installation guide to prepare your environment before running this script"
    exit 1
  fi

  dump_file="$1"

  sub_splitter
  echo "Extracting the MariaDB backup"
  mkdir restore/
  check_code $?
  mv $dump_file restore/
  check_code $?
  pushd restore/
  check_code $?
  mbstream -x < $dump_file
  check_code $?
  mv $dump_file ../
  check_code $?

  sub_splitter
  echo "Processing .qp files"
  for i in $(find -name "*.qp"); do 
    qpress -vd $i $(dirname ${i})
    check_code $?
    rm -f $i
  done

  sub_splitter
  echo "Applying innodb logs"
  mariabackup --prepare --target-dir=./

  sub_splitter
  echo "Stopping packetfence-mariadb and backing up the current data"
  systemctl stop packetfence-mariadb
  pkill -9 -f mariadbd

  mv /var/lib/mysql/ "/var/lib/mysql-`date +%s`"
  mkdir /var/lib/mysql
  mariabackup --innobackupex --defaults-file=/usr/local/pf/var/conf/mariadb.conf      --move-back --force-non-empty-directories ./
  chown -R mysql: /var/lib/mysql

  sub_splitter
  echo "Removing old ib_logfile"
  rm -f /var/lib/mysql/ib_logfile*

  sub_splitter
  echo "Starting MariaDB"
  systemctl start packetfence-mariadb
  check_code $?

  sub_splitter
  echo "Performing upgrade of MariaDB. Enter the MariaDB root password if prompted to"
  echo "NOTE: The root password you must enter is the one of the server of which you're reimporting the data, not this server's MariaDB root password"
  mysql_upgrade -p

  popd
}

function db_upgrade_scripts() {
  current_version="$1"
  current_version=`echo $current_version | sed 's/\./\\./g'`
  db_scripts=`ls /usr/local/pf/db/upgrade-* | egrep '^/usr/local/pf/db/upgrade-[0-9]+\.[0-9]+(\.[0-9]+)?-[0-9]+\.[0-9]+(\.[0-9]+)?\.sql' | sort --version-sort | sed -ne '/'$current_version'/{:a' -e 'n;p;ba' -e '}'`
  echo $db_scripts
}

function upgrade_database() {
  if ! test_db_connection_no_creds; then
    echo -n "Please enter the root password for MariaDB:"
    read -s mariadb_root_pass
    echo
    mariadb_args="$mariadb_args -p$mariadb_root_pass"
  fi

  db_name="$1"
  db_version=`mysql -p $mariadb_args $db_name -e "select version from pf_version order by id desc limit 1;" | egrep -o '^[0-9]+\.[0-9]+'`  
  echo "Database $db_name runs version $db_version"
  if [ -z "$db_version" ]; then
    echo "Unable to find DB version"
    exit 1
  fi
  scripts=`db_upgrade_scripts $db_version`
  echo "Found upgrade path: $scripts"
  for script in $scripts; do
    sub_splitter
    echo "Running $script"
    mysql -v $mariadb_args $db_name < $script
    check_code $?
  done
  
  sub_splitter
  echo "Deleting content of keyed table"
  mysql ${mariadb_args} $db_name -e 'truncate keyed'
  check_code $?
}
