// to display images directly on GitHub
ifdef::env-github[]
:encoding: UTF-8
:lang: en
:doctype: book
:toc: left
:imagesdir: ../images
endif::[]

////

    This file is part of the PacketFence project.

    See PacketFence_Network_Devices_Configuration_Guide-docinfo.xml for 
    authors, copyright and license information.

////

== Switch configuration

=== Assumptions

Throughout this configuration example we use the following assumptions for our network infrastructure: 

[options="compact"]
* PacketFence is fully configured with FreeRADIUS running (if you want 802.1X or MAC Auth) 
* PacketFence IP address: 192.168.1.5 
* Normal VLAN: 1 
* Registration VLAN: 2 
* Isolation VLAN: 3 
* MAC Detection VLAN: 4 
* Guest VLAN: 5
* VoIP, Voice VLAN: 100 
* use SNMP v2c
* SNMP Read community: public
* SNMP Write community: private
* SNMP Trap community: public 
* RADIUS Secret: useStrongerSecret 

//=== 3COM

ifdef::env-github[]
<<networkdevice/3com#3com, 3COM>>
endif::[]
ifndef::env-github[]
include::networkdevice/3com.asciidoc[]
endif::[]

//=== Alcatel

ifdef::env-github[]
<<networkdevice/alcatel#alcatel, Alcatel>>
endif::[]
ifndef::env-github[]
include::networkdevice/alcatel.asciidoc[]
endif::[]

//=== AlliedTelesis

ifdef::env-github[]
<<networkdevice/alliedTelesis#alliedtelesis, AlliedTelesis>>
endif::[]
ifndef::env-github[]
include::networkdevice/alliedTelesis.asciidoc[]
endif::[]

//=== Amer

ifdef::env-github[]
<<networkdevice/amer#amer, Amer>>
endif::[]
ifndef::env-github[]
include::networkdevice/amer.asciidoc[]
endif::[]

//=== Avaya

ifdef::env-github[]
<<networkdevice/avaya#avaya, Avaya>>
endif::[]
ifndef::env-github[]
include::networkdevice/avaya.asciidoc[]
endif::[]

//=== Brocade

ifdef::env-github[]
<<networkdevice/brocade#brocade, Brocade>>
endif::[]
ifndef::env-github[]
include::networkdevice/brocade.asciidoc[]
endif::[]

//=== Cisco

ifdef::env-github[]
<<networkdevice/cisco#cisco, Cisco>>
endif::[]
ifndef::env-github[]
include::networkdevice/cisco.asciidoc[]
endif::[]

//=== Cisco Small Business (SMB)

ifdef::env-github[]
<<networkdevice/cisco_small_business#cisco-small-business-smb, Cisco Small Business (SMB)>>
endif::[]
ifndef::env-github[]
include::networkdevice/cisco_small_business.asciidoc[]
endif::[]

//=== D-Link

ifdef::env-github[]
<<networkdevice/dlink#d-link, D-Link>>
endif::[]
ifndef::env-github[]
include::networkdevice/dlink.asciidoc[]
endif::[]

//=== Dell

ifdef::env-github[]
<<networkdevice/dell#dell, Dell>>
endif::[]
ifndef::env-github[]
include::networkdevice/dell.asciidoc[]
endif::[]

//=== Edge core

ifdef::env-github[]
<<networkdevice/edge_core#edge-core, Edge core>>
endif::[]
ifndef::env-github[]
include::networkdevice/edge_core.asciidoc[]
endif::[]

//=== Enterasys

ifdef::env-github[]
<<networkdevice/enterasys#enterasys, Enterasys>>
endif::[]
ifndef::env-github[]
include::networkdevice/enterasys.asciidoc[]
endif::[]

//=== Extreme Networks

ifdef::env-github[]
<<networkdevice/extreme_networks#extreme-networks, Extreme Networks>>
endif::[]
ifndef::env-github[]
include::networkdevice/extreme_networks.asciidoc[]
endif::[]

//=== Foundry

ifdef::env-github[]
<<networkdevice/foundry#foundry, Foundry>>
endif::[]
ifndef::env-github[]
include::networkdevice/foundry.asciidoc[]
endif::[]

//=== H3C

ifdef::env-github[]
<<networkdevice/h3c#h3c, H3C>>
endif::[]
ifndef::env-github[]
include::networkdevice/h3c.asciidoc[]
endif::[]

//=== HP

ifdef::env-github[]
<<networkdevice/hp#hp, HP>>
endif::[]
ifndef::env-github[]
include::networkdevice/hp.asciidoc[]
endif::[]

//=== HP ProCurve

ifdef::env-github[]
<<networkdevice/hp_procurve#hp-procurve, HP ProCurve>>
endif::[]
ifndef::env-github[]
include::networkdevice/hp_procurve.asciidoc[]
endif::[]

//=== Huawei

ifdef::env-github[]
<<networkdevice/huawei_switchs#huawei, Huawei>>
endif::[]
ifndef::env-github[]
include::networkdevice/huawei_switchs.asciidoc[]
endif::[]

//=== IBM

ifdef::env-github[]
<<networkdevice/ibm#ibm, IBM>>
endif::[]
ifndef::env-github[]
include::networkdevice/ibm.asciidoc[]
endif::[]

=== Intel

==== Express 460 and Express 530

PacketFence support these switches _without VoIP_ using one trap type:

* linkUp/linkDown

Exact command-line configuration to be contributed...

//=== Juniper

ifdef::env-github[]
<<networkdevice/juniper#juniper, Juniper>>
endif::[]
ifndef::env-github[]
include::networkdevice/juniper.asciidoc[]
endif::[]

//=== LG-Ericsson

ifdef::env-github[]
<<networkdevice/lgericsson#lg-ericsson, LG-Ericsson>>
endif::[]
ifndef::env-github[]
include::networkdevice/lgericsson.asciidoc[]
endif::[]

=== Linksys

PacketFence supports Linksys switches _without VoIP_ using one trap type:

* linkUp/linkDown

Don't forget to update the startup config!

==== SRW224G4

Global config settings

  no snmp-server trap authentication
  snmp-server community CS_2000_le rw view Default 
  snmp-server community CS_2000_ls ro view Default 
  snmp-server host 192.168.1.5 public 2

On each interface

  switchport access vlan 4

//=== Netgear

ifdef::env-github[]
<<networkdevice/netgear#netgear, Netgear>>
endif::[]
ifndef::env-github[]
include::networkdevice/netgear.asciidoc[]
endif::[]

=== Pica8

PacketFence supports Pica8 switches without VoIP using CoA to:

* bounce-host-port
* reauthenticate-host

Notes

* **SNMP is not supported yet**
* **Port Security is not supported**

For interfaces with MAC Authentication, perform the following:

  set interface gigabit-ethernet ge-1/1/25 family ethernet-switching port-mode trunk
  set protocols dot1x interface ge-1/1/25 auth-mode mac-radius
  set protocols dot1x interface ge-1/1/25 dynamic-vlan-enable true
  set protocols dot1x traceoptions interface ge-1/1/25 flag all disable false

For interfaces with 802.1X, perform:

  set interface gigabit-ethernet ge-1/1/4 family ethernet-switching port-mode trunk
  set protocols dot1x interface ge-1/1/4 auth-mode dot1x
  set protocols dot1x interface ge-1/1/4 dynamic-vlan-enable true
  set protocols dot1x traceoptions interface ge-1/1/4 flag all disable false
  
Global configuration:

  set protocols dot1x aaa radius nas-ip 10.10.51.169
  set protocols dot1x aaa radius authentication server-ip 192.168.1.5 shared-key useStrongerSecret
  set protocols dot1x aaa radius dynamic-author client 192.168.1.5 shared-key useStrongerSecret
  set protocols dot1x traceoptions interface ge-1/1/4 flag all disable false
  set protocols dot1x traceoptions flag radius disable false
  set vlans vlan-id 10
  set vlans vlan-id 20
  set vlans vlan-id 30
  commit

* `10.10.51.169` is the switch IP
* For interfaces where auth-mode is unknown, use the following command
    set protocols dot1x interface ge-1/1/12 auth-mode dot1x-mac-radius
  This allows the switch to first try 802.1X and if there is no response from the client then fallback to MAC Authentication.
* Create VLAN(s) on the switch as per your requirements
* Please note that traceoptions are only for debugging

=== SMC

==== TigerStack 6128L2, 8824M and 8848M

PacketFence supports these switches without VoIP using two different trap types:

* linkUp/linkDown
* Port Security (with static MACs)

*We recommend to enable Port Security only.*

Global config settings

  SNMP-server host 192.168.1.5 public version 2c udp-port 162
  no snmp-server enable traps link-up-down

On each interface: 

  port security max-mac-count 1
  port security
  port security action trap

==== TigerStack 6224M

Supports linkUp/linkDown mode

Global config settings

  SNMP-server host 192.168.1.5 public version 1

//=== Ubiquiti

ifdef::env-github[]
<<networkdevice/ubiquiti#ubiquiti, Ubiquiti>>
endif::[]
ifndef::env-github[]
include::networkdevice/ubiquiti.asciidoc[]
endif::[]

